{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\r\nimport nodemailer = require('nodemailer');\r\n// import fs = require('fs');\r\n// import dkim = require('nodemailer-dkim');\r\nimport nodemailerSesTransport = require('nodemailer-ses-transport');\r\nimport uuid = require('node-uuid');\r\nimport async = require('async');\r\nimport fs = require('fs');\r\nimport htmlToText = require('html-to-text');\r\nimport handlebars = require('handlebars');\r\n\r\nrequire('handlebars-helpers')({\r\n  handlebars: handlebars\r\n});\r\n\r\nclass mlcl_mailer {\r\n  public static loaderversion = 2;              // version number\r\n  public transporter: nodemailer.Transporter;   // a nodemailer object\r\n  public config: any;                           // configurations mlcl_mailer\r\n  protected viewEngine: Exphbs;                    // View renderer\r\n  protected templateEngine: any;                // Mail templates\r\n  protected molecuel: any;                      // save a copy of parent molecuel\r\n  protected queue: any;                         // rabbit queue\r\n  private stack: Array<Function>;               // custom functions to use as processor in response handling\r\n  public i18n: any;\r\n\r\n  /**\r\n   * mlcl_mailer constructor listens to queue and process jobs\r\n   * @param mlcl any\r\n   * @param config any\r\n   * @return -\r\n   */\r\n  constructor(mlcl: any, config: any) {\r\n    this.molecuel = mlcl;\r\n\r\n    mlcl.mailer = this;\r\n\r\n    this.molecuel.on('mlcl::i18n::init:post', (i18nmod) => {\r\n      this.i18n = i18nmod;\r\n    });\r\n\r\n    // API custom functions to handle response queue messages\r\n    this.stack = [];\r\n\r\n    // Register with RabbitMQ queue jobs\r\n    this.molecuel.on('mlcl::queue::init:post', (queue) => {\r\n      this.queue = queue;\r\n\r\n      // Worker mode ( see docker run string )\r\n      if (this.molecuel.serverroles && this.molecuel.serverroles.worker) {\r\n\r\n        // register response queue with the name given here\r\n        let responseQname = 'mlcl::mailer:responseq';\r\n        let responseChan = this.queue.getChannel();\r\n        responseChan.then((rch) => {\r\n          rch.assertQueue(responseQname);\r\n          rch.prefetch(50);\r\n          rch.consume(responseQname, (msg) => {\r\n            let parsed = JSON.parse(msg.content);\r\n            this.molecuel.log.debug('mlcl::mailer::queue::response::message:uuid ' + parsed.data.uuid);\r\n\r\n            // Asynchronously process the response queue stack\r\n            // Async 1.4.2 line 125 index.d.ts ( see issue https://github.com/DefinitelyTyped/DefinitelyTyped/issues/8937 )\r\n            let execHandler = this.execHandler(rch, msg);\r\n            async.doWhilst((callback) => {\r\n              let res = execHandler.next();\r\n              callback(null, res);\r\n            }, (res) => {\r\n              return !res.done;\r\n            }, (err) => {\r\n              if (err) {\r\n                this.molecuel.log.error('mlcl::mailer::queue::response::async:error: ' + err);\r\n              }\r\n            });\r\n          });\r\n        });\r\n\r\n        // register send queue with the name given here\r\n        let qname = 'mlcl::mailer:sendq';\r\n        let chan = this.queue.getChannel();\r\n        chan.then((ch) => {\r\n          ch.assertQueue(qname);\r\n          ch.prefetch(50);\r\n          ch.consume(qname, (msg) => {\r\n            let m = msg.content.toString();\r\n\r\n            //  this.molecuel.log.debug('mlcl::mailer::queue::send:message: ' + m);\r\n            let msgobject = JSON.parse(m);\r\n\r\n            this.sendMail(msgobject, (err, info, mailoptions) => {\r\n              // save the state in this object\r\n              let returnmsgobject;\r\n\r\n              // Catch all err/success and send returnmsgobject to response queue\r\n              if (err) {\r\n                returnmsgobject = {\r\n                  status: 'error',\r\n                  data: msgobject,\r\n                  error: err\r\n                };\r\n                ch.nack(msg);\r\n              } else {\r\n                info.sentTime = new Date();\r\n                returnmsgobject = {\r\n                  status: 'success',\r\n                  data: msgobject,\r\n                  info: info\r\n                };\r\n                ch.ack(msg);\r\n              }\r\n              ch.sendToQueue(responseQname, new Buffer(JSON.stringify(returnmsgobject)));\r\n            });\r\n          });\r\n        }).then(null, function(error) {\r\n          this.molecuel.log.error('mlcl_mailer', error);\r\n        });\r\n      }\r\n    });\r\n\r\n    // node-mailer migration 2.x backward compatibility if smtp is configured in legacy mode\r\n    // Legacy object is mlcl.config.smtp, new object is mlcl.config.mail.smtp\r\n    if (mlcl && mlcl.config && mlcl.config.smtp && mlcl.config.smtp.enabled) {\r\n      let config: any = {};\r\n      config.smtp = mlcl.config.smtp;\r\n      this.checkSmtpConfig(config);\r\n      if (mlcl.config.smtp.templateDir) {\r\n        this.config.templateDir = mlcl.config.smtp.templateDir;\r\n      }\r\n      this.transporter = nodemailer.createTransport(this.config.smtp);\r\n    }\r\n    // node-mailer 2.x switch smtp, ses...\r\n    else if (mlcl && mlcl.config && mlcl.config.mail && mlcl.config.mail.enabled) {\r\n      // SMTP\r\n      if (mlcl.config.mail.enabled && mlcl.config.mail.smtp && mlcl.config.mail.default === 'smtp') {\r\n        this.checkSmtpConfig(mlcl.config.mail);\r\n        if (mlcl.config.mail.templateDir) {\r\n          this.config.templateDir = mlcl.config.mail.templateDir;\r\n        }\r\n        this.transporter = nodemailer.createTransport(this.config.smtp);\r\n      }\r\n      // Amazon SES\r\n      else if (mlcl.config.mail.enabled && mlcl.config.mail.ses && mlcl.config.mail.default === 'ses') {\r\n        if (mlcl.config.mail.ses.tlsUnauth) {\r\n          process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';\r\n        }\r\n        if (!this.config) {\r\n          this.config = {\r\n            ses: {}\r\n          };\r\n        }\r\n        this.config.ses = {};\r\n        if (mlcl.config.mail.templateDir) {\r\n          this.config.templateDir = mlcl.config.mail.templateDir;\r\n        }\r\n        this.config.ses.accessKeyId = mlcl.config.mail.ses.accessKeyId;\r\n        this.config.ses.secretAccessKey = mlcl.config.mail.ses.secretAccessKey;\r\n        this.config.ses.rateLimit = mlcl.config.mail.ses.rateLimit || 5;\r\n        this.config.ses.region = mlcl.config.mail.ses.region || 'eu-west-1';\r\n\r\n        // SESTransporter\r\n        this.transporter = nodemailer.createTransport(\r\n          nodemailerSesTransport(this.config.ses)\r\n        );\r\n      }\r\n    }\r\n    this.molecuel.emit('mlcl::mailer::init:post', this);\r\n  }\r\n\r\n  /**\r\n   * mlcl_mailer::sendToQueue(qobject)\r\n   * @brief If a certain threshold of E-Mails is exeeded,\r\n   *        incoming jobs will be forwarded to queue.\r\n   * @param qobject Object containing E-Mail message fields and values\r\n   * @return void\r\n   */\r\n  public sendToQueue(qobject: any, callback?: Function): void {\r\n    // mandatory fields are from, to, subject and template\r\n    if (qobject.from && qobject.to && (qobject.subject || qobject.subjectTemplate) && qobject.template) {\r\n      qobject.uuid = uuid.v4();\r\n      //  this.molecuel.log.debug('mailer', 'Sending job object to queue', qobject);\r\n      //  publish task queues with the name given here\r\n      let qname = 'mlcl::mailer:sendq';\r\n      let chan = this.queue.getChannel();\r\n      chan.then((ch) => {\r\n        ch.assertQueue(qname);\r\n        ch.sendToQueue(qname, new Buffer(JSON.stringify(qobject)));\r\n        if (callback) {\r\n          callback(null, qobject);\r\n        }\r\n      })\r\n        .then(null, (error) => {\r\n          if (error) {\r\n            this.molecuel.log.error('mailer', 'sendToQueue :: error while sending to queue', error);\r\n          }\r\n          if (callback) {\r\n            callback(error, qobject);\r\n          }\r\n        });\r\n    } else {\r\n      this.molecuel.log.warn('mailer', 'sendToQueue :: missing mandatory fields', qobject);\r\n    }\r\n  }\r\n\r\n  public checkSmtpConfig(config: any) {\r\n    if (config && config.smtp && config.smtp.tlsUnauth) {\r\n      process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';\r\n    }\r\n\r\n    if (!this.config) {\r\n      this.config = {\r\n        smtp: {}\r\n      };\r\n    }\r\n\r\n    let smtp: any = {};\r\n\r\n    smtp.host = config.smtp.host || 'localhost';\r\n    smtp.port = config.smtp.port || 25;\r\n    if (config.smtp.auth) {\r\n      smtp.auth = config.smtp.auth;\r\n    }\r\n    smtp.maxConnections = config.smtp.maxConnection || 5;\r\n    smtp.maxMessages = config.smtp.maxMessages || 100;\r\n    smtp.rateLimit = config.smtp.rateLimit || false;\r\n    smtp.secure = config.smtp.secure || false;\r\n    smtp.debug = config.smtp.debug || false;\r\n    smtp.pool = config.smtp.pool || false;\r\n\r\n    this.config.smtp = smtp;\r\n  }\r\n\r\n  /**\r\n   * sendMail with nodemailer as SMTP or SES\r\n   * @param mailoptions any\r\n   * @param callback function optional\r\n   * @return void\r\n   */\r\n  public sendMail(mailoptions: any, callback?: Function): void {\r\n    let data = mailoptions.context;\r\n    if (mailoptions.data) {\r\n      data = mailoptions.data;\r\n    }\r\n    if (mailoptions.subject) {\r\n      data.subject = mailoptions.subject;\r\n    }\r\n    this.renderTemplate(mailoptions.template, data, (err, templatedata) => {\r\n      if (!err) {\r\n        if (templatedata.text) {\r\n          mailoptions.text = templatedata.text;\r\n        }\r\n        if (templatedata.html) {\r\n          mailoptions.html = templatedata.html;\r\n        }\r\n        if (mailoptions.subjectTemplate) {\r\n          mailoptions.subject = this.handlebarCompile(data, mailoptions.subjectTemplate);\r\n        }\r\n        // send mail with defined transport  object\r\n        this.transporter.sendMail(mailoptions, (error, info) => {\r\n          if (error) {\r\n            let messageid = null;\r\n            if (info && info.messageId) {\r\n              messageid = info.messageId;\r\n            }\r\n            this.molecuel.log.error('mailer', 'Error while delivering mail',\r\n              { messageId: messageid, error: error });\r\n            this.molecuel.emit('mlcl::mailer::message:error', this, mailoptions, error);\r\n          } else {\r\n            this.molecuel.log.info('mailer', 'Mail queued',\r\n              { messageId: info.messageId });\r\n            this.molecuel.emit('mlcl::mailer::message:success', this, mailoptions, info);\r\n          }\r\n          if (callback) {\r\n            callback(error, info, mailoptions);\r\n          }\r\n        });\r\n      } else {\r\n        this.molecuel.log.error('mailer', 'Error while rendering template', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * registerHandler takes custom functions to process a response queue\r\n   * Custom function must have a single parameter which will become a responseobject\r\n   *\r\n   * @param handlerfunc Function\r\n   * @return void\r\n   */\r\n  public registerHandler(handlerfunc: Function, bindContext: any): void {\r\n    if (bindContext) {\r\n      this.stack.push(handlerfunc.bind(bindContext));\r\n    } else {\r\n      this.stack.push(handlerfunc);\r\n    }\r\n  }\r\n\r\n\r\n  public renderTemplate(templatename, data, callback) {\r\n    this.renderHtml(templatename, data, (err, html) => {\r\n      if (err) {\r\n        callback(err);\r\n      } else {\r\n        let templates: any = {};\r\n        templates.html = html;\r\n        templates.text = this.toText(html);\r\n        callback(null, templates);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * [renderTemplate description]\r\n   * @param  {[type]} templatename [description]\r\n   * @param  {[type]} data         [description]\r\n   * @return {String}              [description]\r\n   */\r\n  public renderHtml(templatename, data, callback): void {\r\n    let templateDir = this.config.templateDir;\r\n\r\n    fs.readFile(templateDir + '/' + templatename + '.hbs', 'utf8', (err, templatestr) => {\r\n      if (err) {\r\n        callback(err);\r\n      } else {\r\n        try {\r\n          let htmlstring = this.handlebarCompile(data, templatestr);\r\n          callback(null, htmlstring);\r\n        } catch (e) {\r\n          callback(e);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public handlebarCompile(data, templatestr: string): string {\r\n    let handlebarsinstance = handlebars.create();\r\n    let lang = data.lang;\r\n    if (!data.lang) {\r\n      lang = 'en';\r\n    }\r\n    if (this.i18n) {\r\n      let i18n = this.i18n.getLocalizationInstanceForLanguage(lang);\r\n      let translate = i18n.i18next.getFixedT(lang);\r\n      handlebarsinstance.registerHelper('translate', function(translatestring) {\r\n        let translation = translate(translatestring, data);\r\n        return translation;\r\n      });\r\n    }\r\n    let compiled = handlebarsinstance.compile(templatestr);\r\n    let htmlstring = compiled(data);\r\n\r\n    return htmlstring;\r\n  }\r\n\r\n  public toText(htmlString) {\r\n    return htmlToText.fromString(htmlString);\r\n  }\r\n\r\n  /**\r\n   * execHandler Generator function (Iterator) processes a queue\r\n   * @param channel amqplib channel\r\n   * @param responseobject original queue message to ack/nack\r\n   * @return -\r\n   */\r\n  private * execHandler(channel, responseobject) {\r\n    try {\r\n      for (let i in this.stack) {\r\n        yield this.stack[i](responseobject);\r\n      }\r\n      channel.ack(responseobject);\r\n    } catch (err) {\r\n      channel.nack(responseobject);\r\n    }\r\n  }\r\n}\r\n\r\nexport = mlcl_mailer;\r\n"],"sourceRoot":"/source/"}